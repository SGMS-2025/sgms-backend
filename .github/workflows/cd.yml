name: CD Pipeline - Production Deployment

on:
  push:
    branches: [main]
  workflow_dispatch:
    inputs:
      force_deploy:
        description: 'Force deployment (skip checks)'
        required: false
        default: false
        type: boolean

env:
  HUSKY: 0
  NODE_VERSION: '20'
  DOCKER_HUB_USERNAME: ${{ secrets.DOCKER_HUB_USERNAME }}
  DOMAIN: gymsmart.site

jobs:
  test:
    name: Pre-deployment Tests
    runs-on: ubuntu-latest
    if: ${{ !inputs.force_deploy }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Run full test suite
        env:
          NODE_ENV: ${{ secrets.NODE_ENV }}
          PORT: ${{ secrets.PORT }}
          MONGODB_URI: ${{ secrets.MONGODB_URI }}
          JWT_SECRET: ${{ secrets.JWT_SECRET }}
          JWT_EXPIRES_IN: ${{ secrets.JWT_EXPIRES_IN }}
          LOG_LEVEL: ${{ secrets.LOG_LEVEL }}
          CORS_ORIGIN: ${{ secrets.CORS_ORIGIN }}
          RATE_LIMIT_WINDOW_MS: ${{ secrets.RATE_LIMIT_WINDOW_MS }}
          RATE_LIMIT_MAX_REQUESTS: ${{ secrets.RATE_LIMIT_MAX_REQUESTS }}
        run: |
          npm run lint
          npm test
          npm run test:config
          
      - name: Security audit
        run: npm audit --audit-level high

  build-and-push:
    name: Build & Push Docker Image
    runs-on: ubuntu-latest
    needs: [test]
    if: always() && (needs.test.result == 'success' || inputs.force_deploy)
    
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}
          
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.DOCKER_HUB_USERNAME }}/sgms-backend
          tags: |
            type=ref,event=branch
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}
            
      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          
      - name: Generate deployment summary
        run: |
          echo "## üöÄ Docker Image Built Successfully" >> $GITHUB_STEP_SUMMARY
          echo "**Image:** \`${{ env.DOCKER_HUB_USERNAME }}/sgms-backend:latest\`" >> $GITHUB_STEP_SUMMARY
          echo "**SHA:** \`${{ github.sha }}\`" >> $GITHUB_STEP_SUMMARY
          echo "**Size:** $(docker images ${{ env.DOCKER_HUB_USERNAME }}/sgms-backend:latest --format 'table {{.Size}}')" >> $GITHUB_STEP_SUMMARY

  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build-and-push]
    environment: production
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup SSH Agent
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}
          
      - name: Copy deployment files
        run: |
          echo "üîç Testing network connectivity..."
          ping -c 3 ${{ secrets.SSH_HOST }} || echo "‚ö†Ô∏è Ping failed, but continuing..."
          
          echo "üîç Testing SSH port accessibility..."
          nc -zv ${{ secrets.SSH_HOST }} 22 || echo "‚ö†Ô∏è SSH port test failed"
          
          echo "üîë Testing SSH connection..."
          ssh -o StrictHostKeyChecking=no -o ConnectTimeout=30 -o ServerAliveInterval=60 -p 22 ${{ secrets.SSH_USERNAME }}@${{ secrets.SSH_HOST }} "echo 'SSH connection successful'; whoami; pwd"
          
          echo "üìÅ Copying deployment files..."
          scp -o StrictHostKeyChecking=no -o ConnectTimeout=30 -o ServerAliveInterval=60 -P 22 docker-compose.prod.yml ${{ secrets.SSH_USERNAME }}@${{ secrets.SSH_HOST }}:~/sgms-backend/
          scp -o StrictHostKeyChecking=no -o ConnectTimeout=30 -o ServerAliveInterval=60 -P 22 nginx.conf ${{ secrets.SSH_USERNAME }}@${{ secrets.SSH_HOST }}:~/sgms-backend/
          
      - name: Deploy to production
        id: deploy
        run: |
          # Function to retry SSH commands
          retry_ssh() {
            local cmd="$1"
            local max_attempts=3
            local attempt=1
            
            while [ $attempt -le $max_attempts ]; do
              echo "üîÑ Attempt $attempt/$max_attempts: $cmd"
              if ssh -o StrictHostKeyChecking=no -o ConnectTimeout=30 -o ServerAliveInterval=60 -p 22 ${{ secrets.SSH_USERNAME }}@${{ secrets.SSH_HOST }} "$cmd"; then
                echo "‚úÖ Command executed successfully"
                return 0
              else
                echo "‚ùå Attempt $attempt failed"
                if [ $attempt -eq $max_attempts ]; then
                  echo "ÔøΩ All attempts failed"
                  return 1
                fi
                echo "‚è≥ Waiting 10 seconds before retry..."
                sleep 10
                attempt=$((attempt + 1))
              fi
            done
          }
          
          # Execute deployment commands with retry
          retry_ssh "cd ~/sgms-backend && echo 'üîÑ Pulling latest code...' && git pull origin main"
          retry_ssh "echo 'üèóÔ∏è Pulling latest Docker image...' && docker pull ${{ env.DOCKER_HUB_USERNAME }}/sgms-backend:latest"
          retry_ssh "cd ~/sgms-backend && echo 'üöÄ Deploying application...' && chmod +x deploy.sh && ./deploy.sh"
          retry_ssh "echo '‚úÖ Deployment completed!'"
          
      - name: Health check
        run: |
          echo "üè• Running health checks..."
          sleep 30
          
          # Try both HTTP and HTTPS
          HEALTH_CHECK_HTTP=$(curl -s --max-time 10 http://${{ secrets.SSH_HOST }}/api/health || echo "failed")
          HEALTH_CHECK_HTTPS=$(curl -s --max-time 10 -k https://${{ secrets.SSH_HOST }}/api/health || echo "failed")
          HEALTH_CHECK_API=$(curl -s --max-time 10 -k https://api.gymsmart.site/api/health || echo "failed")
          
          echo "HTTP Health Check: $HEALTH_CHECK_HTTP"
          echo "HTTPS Health Check: $HEALTH_CHECK_HTTPS"  
          echo "API Domain Health Check: $HEALTH_CHECK_API"
          
          if [[ $HEALTH_CHECK_HTTP == *"success"* ]] || [[ $HEALTH_CHECK_HTTPS == *"success"* ]] || [[ $HEALTH_CHECK_API == *"success"* ]]; then
            echo "‚úÖ Health check passed!"
            echo "HEALTH_STATUS=healthy" >> $GITHUB_ENV
          else
            echo "‚ö†Ô∏è Health check failed, but continuing..."
            echo "HEALTH_STATUS=check_failed" >> $GITHUB_ENV
            # Don't exit 1 to allow deployment to complete
          fi
          
      - name: Deployment summary
        run: |
          echo "## üéâ Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "**Status:** ‚úÖ Success" >> $GITHUB_STEP_SUMMARY
          echo "**Environment:** Production" >> $GITHUB_STEP_SUMMARY
          echo "**Server:** \`${{ secrets.SSH_HOST }}\`" >> $GITHUB_STEP_SUMMARY
          echo "**Health:** ${{ env.HEALTH_STATUS }}" >> $GITHUB_STEP_SUMMARY
          echo "**API URL:** https://${{ secrets.SSH_HOST }}/api" >> $GITHUB_STEP_SUMMARY
          echo "**Deployed at:** $(date -u)" >> $GITHUB_STEP_SUMMARY

  notify:
    name: Notify Team
    runs-on: ubuntu-latest
    needs: [deploy]
    if: always()
    
    steps:
      - name: Notify Discord on Success
        if: needs.deploy.result == 'success'
        env:
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
        run: |
          curl -X POST "$DISCORD_WEBHOOK" \
            -H "Content-Type: application/json" \
            -d '{
              "embeds": [{
                "title": "üöÄ SGMS Backend Deployed Successfully",
                "description": "**Branch:** main\n**Commit:** `${{ github.sha }}`\n**Author:** ${{ github.actor }}\n**API:** https://${{ secrets.SSH_HOST }}/api",
                "color": 3066993,
                "timestamp": "'$(date -u +%Y-%m-%dT%H:%M:%S.000Z)'"
              }]
            }'
            
      - name: Notify Discord on Failure
        if: needs.deploy.result == 'failure'
        env:
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
        run: |
          curl -X POST "$DISCORD_WEBHOOK" \
            -H "Content-Type: application/json" \
            -d '{
              "embeds": [{
                "title": "‚ùå SGMS Backend Deployment Failed",
                "description": "**Branch:** main\n**Commit:** `${{ github.sha }}`\n**Author:** ${{ github.actor }}\n**Check:** [View Logs](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})",
                "color": 15158332,
                "timestamp": "'$(date -u +%Y-%m-%dT%H:%M:%S.000Z)'"
              }]
            }'
