name: CI ‚Ä¢ SonarCloud + Jira

on:
  push:
    branches: ['*'] # Ch·∫°y SonarCloud cho m·ªçi branch khi push
  pull_request:
    branches: ['main', 'dev']
    types: [opened, reopened, synchronize]

jobs:
  analyze:
    runs-on: ubuntu-latest

    env:
      SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
      SONAR_ORG: ${{ secrets.SONAR_ORG }}
      SONAR_PROJECT_KEY: sgms-backend
      JIRA_URL: ${{ secrets.JIRA_URL }}
      JIRA_USER: ${{ secrets.JIRA_USER }}
      JIRA_API_TOKEN: ${{ secrets.JIRA_API_TOKEN }}
      JIRA_PROJECT_KEY: ${{ secrets.JIRA_PROJECT_KEY }}

    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Use Node.js 20
        uses: actions/setup-node@v3
        with:
          node-version: '20'

      - name: Install deps
        run: npm ci

      - name: Run tests (with coverage)
        run: npm test

      # SonarCloud Scan cho m·ªçi branch
      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@v2.3.0
        with:
          args: >
            -Dsonar.projectKey=$SONAR_PROJECT_KEY
            -Dsonar.organization=$SONAR_ORG
            -Dsonar.projectName=$SONAR_PROJECT_KEY
            -Dsonar.branch.name=${{ github.ref_name }}
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Ki·ªÉm tra Quality Gate & t·∫°o Jira issue
      - name: Check Quality Gate & create Jira issue
        run: |
          sudo apt-get update -y && sudo apt-get install -y jq

          echo "‚è≥ Waiting for SonarCloud Quality Gate..."
          for i in {1..24}; do
            STATUS=$(curl -s -u $SONAR_TOKEN: \
              "$SONAR_HOST_URL/api/qualitygates/project_status?projectKey=$SONAR_PROJECT_KEY" \
              | jq -r '.projectStatus.status // empty')
            if [ -n "$STATUS" ]; then
              echo "Quality Gate Status: $STATUS"
              break
            fi
            sleep 5
          done

          echo "üì• Fetching top issues..."
          ISSUES_JSON=$(curl -s -u $SONAR_TOKEN: \
            "$SONAR_HOST_URL/api/issues/search?projects=$SONAR_PROJECT_KEY&severities=BLOCKER,CRITICAL,MAJOR&ps=10&resolved=false")

          # T·∫°o bullet list ADF cho Jira
          ISSUES_BULLETS=$(echo "$ISSUES_JSON" | jq -r --arg url "$SONAR_HOST_URL" --arg key "$SONAR_PROJECT_KEY" '
            .issues | map({
              type: "listItem",
              content: [{
                type: "paragraph",
                content: [{
                  type: "text",
                  text: ("[" + .severity + "] " + .message + " (" + (.component | split(":")[1]) + ":" + ((.textRange.startLine|tostring)//"?") + ") " + $url + "/project/issues?id=" + $key + "&open=" + .key)
                }]
              }]
            })
          ')

          if [ "$STATUS" != "OK" ]; then
            SUMMARY="[SonarCloud] Quality Gate FAILED - $SONAR_PROJECT_KEY"
            ISSUE_TYPE="Bug"
            STATUS_TEXT="Quality Gate FAILED"
          else
            SUMMARY="[SonarCloud] Quality Gate PASSED - $SONAR_PROJECT_KEY"
            ISSUE_TYPE="Task"
            STATUS_TEXT="Quality Gate PASSED"
          fi

          DESCRIPTION_ADF=$(jq -n --arg status "$STATUS_TEXT" --arg project "$SONAR_PROJECT_KEY" --arg dashboard "$SONAR_HOST_URL/project/overview?id=$SONAR_PROJECT_KEY" --argjson bullets "$ISSUES_BULLETS" '{
            type: "doc",
            version: 1,
            content: [
              { type: "paragraph", content: [{ type: "text", text: ($status + " for project: " + $project) }] },
              { type: "bulletList", content: $bullets },
              { type: "paragraph", content: [{ type: "text", text: ("Dashboard: " + $dashboard) }] }
            ]
          }')

          # T·∫°o Jira issue
          curl -s -X POST \
            -H "Content-Type: application/json" \
            -u "$JIRA_USER:$JIRA_API_TOKEN" \
            --data "$(jq -n --arg summary "$SUMMARY" --arg type "$ISSUE_TYPE" --argjson description "$DESCRIPTION_ADF" --arg key "$JIRA_PROJECT_KEY" '{
              fields: {
                project: { key: $key },
                summary: $summary,
                description: $description,
                issuetype: { name: $type },
                labels: ["sonarcloud","quality-gate",$key]
              }
            }')" \
            "$JIRA_URL/rest/api/3/issue/"

          # N·∫øu mu·ªën fail job khi Quality Gate FAILED, th√™m:
          if [ "$STATUS" != "OK" ]; then
            exit 1
          fi
